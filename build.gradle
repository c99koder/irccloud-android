/*
 * Copyright (c) 2015 IRCCloud, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://www.jitpack.io" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.8'
        classpath 'com.google.gms:google-services:4.3.15'
        classpath 'com.google.firebase:perf-plugin:1.4.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.application'
if (rootProject.file('private.properties').exists()) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.firebase-perf'
    apply plugin: 'com.google.firebase.crashlytics'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    jcenter()
    mavenCentral()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url "https://www.jitpack.io" }
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
}

def getRevision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 33
    testBuildType "mockdata"
    namespace "com.irccloud.android"

    defaultConfig {
        versionCode 354
        versionName "4.31"
        minSdkVersion 22
        targetSdkVersion 33
        applicationId "com.irccloud.android"
        testApplicationId "com.irccloud.android.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resourceConfigurations += ['en']

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            if (rootProject.file('keystore.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('keystore.properties')))

                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }
        }
    }


    buildFeatures {
        dataBinding true
    }

    buildTypes {
        debug {
            buildConfigField "String", "HOST", "\"api.irccloud.com\""
            versionNameSuffix "-" + getRevision()
            buildConfigField "boolean", "ENTERPRISE", "false"
            if (rootProject.file('private.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('private.properties')))
                buildConfigField "String", "IMGUR_KEY", "\"" + props['IMGUR_KEY'] + "\""
                buildConfigField "String", "IMGUR_SECRET", "\"" + props['IMGUR_SECRET'] + "\""
            } else {
                buildConfigField "String", "IMGUR_KEY", "\"\""
                buildConfigField "String", "IMGUR_SECRET", "\"\""
                resValue "string", "google_app_id", ""
                resValue "string", "gcm_defaultSenderId", ""
                resValue "string", "default_web_client_id", ""
                resValue "string", "firebase_database_url", ""
                resValue "string", "google_api_key", ""
                resValue "string", "google_crash_reporting_api_key", ""
                resValue "string", "project_id", ""
            }
            resValue "string", "IMAGE_SCHEME", "irccloud-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-images"
            resValue "string", "VIDEO_SCHEME", "irccloud-video"
            resValue "string", "VIDEO_SCHEME_SECURE", "irccloud-videos"
            resValue "string", "PASTE_SCHEME", "irccloud-paste"
            resValue "string", "ACTION_REPLY", "com.irccloud.android.ACTION_REPLY"
            resValue "string", "app_name", "IRCCloud"
            resValue "string", "IRCCLOUD_SCHEME", "irccloud"
            resValue "color", "ic_background", "#527dff"
            buildConfigField "String", "GCM_ID_IRCCLOUD", "\"\""
            buildConfigField "boolean", "MOCK_DATA", "false"

            minifyEnabled false
            shrinkResources false
        }

        release {
            buildConfigField "String", "HOST", "\"api.irccloud.com\""
            buildConfigField "boolean", "ENTERPRISE", "false"
            if (rootProject.file('private.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('private.properties')))
                buildConfigField "String", "IMGUR_KEY", "\"" + props['IMGUR_KEY'] + "\""
                buildConfigField "String", "IMGUR_SECRET", "\"" + props['IMGUR_SECRET'] + "\""
            } else {
                buildConfigField "String", "IMGUR_KEY", "\"\""
                buildConfigField "String", "IMGUR_SECRET", "\"\""
                resValue "string", "google_app_id", ""
                resValue "string", "gcm_defaultSenderId", ""
                resValue "string", "default_web_client_id", ""
                resValue "string", "firebase_database_url", ""
                resValue "string", "google_api_key", ""
                resValue "string", "google_crash_reporting_api_key", ""
                resValue "string", "project_id", ""
            }
            resValue "string", "IMAGE_SCHEME", "irccloud-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-images"
            resValue "string", "VIDEO_SCHEME", "irccloud-video"
            resValue "string", "VIDEO_SCHEME_SECURE", "irccloud-videos"
            resValue "string", "PASTE_SCHEME", "irccloud-paste"
            resValue "string", "ACTION_REPLY", "com.irccloud.android.ACTION_REPLY"
            resValue "string", "app_name", "IRCCloud"
            resValue "string", "IRCCLOUD_SCHEME", "irccloud"
            resValue "color", "ic_background", "#527dff"
            buildConfigField "String", "GCM_ID_IRCCLOUD", "\"\""
            buildConfigField "boolean", "MOCK_DATA", "false"

            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }

            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        enterprisedebug {
            applicationIdSuffix ".enterprise"
            versionNameSuffix "-" + getRevision()
            buildConfigField "String", "HOST", "\"\""
            buildConfigField "boolean", "ENTERPRISE", "true"
            if (rootProject.file('enterprise.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('enterprise.properties')))
                buildConfigField "String", "IMGUR_KEY", "\"" + props['IMGUR_KEY'] + "\""
                buildConfigField "String", "IMGUR_SECRET", "\"" + props['IMGUR_SECRET'] + "\""
            } else {
                buildConfigField "String", "IMGUR_KEY", "\"\""
                buildConfigField "String", "IMGUR_SECRET", "\"\""
                resValue "string", "google_app_id", ""
                resValue "string", "gcm_defaultSenderId", ""
                resValue "string", "default_web_client_id", ""
                resValue "string", "firebase_database_url", ""
                resValue "string", "google_api_key", ""
                resValue "string", "google_crash_reporting_api_key", ""
                resValue "string", "project_id", ""
            }
            resValue "string", "IMAGE_SCHEME", "irccloud-enterprise-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-enterprise-images"
            resValue "string", "VIDEO_SCHEME", "irccloud-enterprise-video"
            resValue "string", "VIDEO_SCHEME_SECURE", "irccloud-enterprise-videos"
            resValue "string", "PASTE_SCHEME", "irccloud-enterprise-paste"
            resValue "string", "ACTION_REPLY", "com.irccloud.android.enterprise.ACTION_REPLY"
            resValue "string", "app_name", "IRCEnterprise"
            resValue "string", "IRCCLOUD_SCHEME", "irccloud-enterprise"
            resValue "color", "ic_background", "#404040"
            buildConfigField "boolean", "MOCK_DATA", "false"

            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            debuggable true
        }

        enterpriserelease {
            applicationIdSuffix ".enterprise"
            buildConfigField "String", "HOST", "\"\""
            buildConfigField "boolean", "ENTERPRISE", "true"
            if (rootProject.file('enterprise.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('enterprise.properties')))
                buildConfigField "String", "IMGUR_KEY", "\"" + props['IMGUR_KEY'] + "\""
                buildConfigField "String", "IMGUR_SECRET", "\"" + props['IMGUR_SECRET'] + "\""
            } else {
                buildConfigField "String", "IMGUR_KEY", "\"\""
                buildConfigField "String", "IMGUR_SECRET", "\"\""
                resValue "string", "google_app_id", ""
                resValue "string", "gcm_defaultSenderId", ""
                resValue "string", "default_web_client_id", ""
                resValue "string", "firebase_database_url", ""
                resValue "string", "google_api_key", ""
                resValue "string", "google_crash_reporting_api_key", ""
                resValue "string", "project_id", ""
            }
            resValue "string", "IMAGE_SCHEME", "irccloud-enterprise-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-enterprise-images"
            resValue "string", "VIDEO_SCHEME", "irccloud-enterprise-video"
            resValue "string", "VIDEO_SCHEME_SECURE", "irccloud-enterprise-videos"
            resValue "string", "PASTE_SCHEME", "irccloud-enterprise-paste"
            resValue "string", "ACTION_REPLY", "com.irccloud.android.enterprise.ACTION_REPLY"
            resValue "string", "app_name", "IRCEnterprise"
            resValue "string", "IRCCLOUD_SCHEME", "irccloud-enterprise"
            resValue "color", "ic_background", "#404040"
            buildConfigField "boolean", "MOCK_DATA", "false"

            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        mockdata {
            initWith debug

            buildConfigField "boolean", "MOCK_DATA", "true"

            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            debuggable true
        }
    }

    sourceSets {
        main.manifest.srcFile 'AndroidManifest.xml'
        main.java.srcDirs = ['src']
        main.resources.srcDirs = ['src']
        main.aidl.srcDirs = ['src']
        main.renderscript.srcDirs = ['src']
        main.res.srcDirs = ['res', 'themes']
        main.assets.srcDirs = ['assets']
        enterprisedebug.res.srcDirs = ['enterprise-res', 'themes']
        enterpriserelease.res.srcDirs = ['enterprise-res', 'themes']
        mockdata.manifest.srcFile 'AndroidManifestMock.xml'

        androidTest {
            java.srcDirs = ['tests/src']
            res.srcDirs = ['tests/res']
            assets.srcDirs = ['tests/assets']
            resources.srcDirs = ['tests/src']
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/NOTICE', 'META-INF/ASL-2.0.txt', 'META-INF/LGPL-3.0.txt']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lint {
        abortOnError false
    }
}

task __filteredResources(type: Copy) {
    from('res/') {
        exclude 'drawable-mdpi/ic_launcher.png'
        exclude 'drawable-hdpi/ic_launcher.png'
        exclude 'drawable-xhdpi/ic_launcher.png'
        exclude 'drawable-xxhdpi/ic_launcher.png'
        exclude 'drawable-xxxhdpi/ic_launcher.png'
        exclude 'drawable-mdpi/login_logo.png'
        exclude 'drawable-hdpi/login_logo.png'
        exclude 'drawable-xhdpi/login_logo.png'
        exclude 'drawable-xxhdpi/login_logo.png'
        exclude 'drawable-xxxhdpi/login_logo.png'
        exclude 'drawable/notification_icon_bg.xml'
    }
    into 'build/filtered_resources'
    includeEmptyDirs = true
}

tasks.whenTaskAdded { task ->
    if (task.name == 'mergeEnterprisedebugResources' || task.name == 'mergeEnterprisereleaseResources') {
        task.dependsOn __filteredResources
    }
}

dependencies {
    implementation 'androidx.work:work-runtime:2.8.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'
    implementation 'androidx.sharetarget:sharetarget:1.2.0'
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "com.google.android.material:material:1.9.0"
    implementation "androidx.recyclerview:recyclerview:1.3.1"
    implementation "androidx.browser:browser:1.5.0"
    implementation "androidx.exifinterface:exifinterface:1.3.6"
    implementation "androidx.room:room-runtime:2.5.2"
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    annotationProcessor "androidx.room:room-compiler:2.5.2"
    implementation "com.google.android.gms:play-services-base:18.2.0"
    implementation "com.google.android.gms:play-services-auth:20.6.0"
    implementation "com.google.android.gms:play-services-identity:18.0.1"
    implementation 'com.google.firebase:firebase-messaging:23.2.1'
    implementation 'com.google.firebase:firebase-perf:20.4.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.4.0'
    implementation 'com.vandalsoftware.android:dslv:0.6.3'
    implementation 'com.damnhandy:handy-uri-templates:2.1.7'
    implementation 'com.commonsware.cwac:richedit:0.5.2'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.19'
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation project(':android-websockets')
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    implementation 'org.solovyev.android.views:linear-layout-manager:0.5@aar'
    implementation 'com.datatheorem.android.trustkit:trustkit:1.1.3'
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'tools.fastlane:screengrab:1.2.0'
}
